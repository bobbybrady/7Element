// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _7Element.Data;

namespace _7Element.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191216191321_nullableValue")]
    partial class nullableValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_7Element.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeteran")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e818902-d9c1-4e65-981c-003c87479cc4",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admina",
                            IsAdmin = true,
                            IsVeteran = true,
                            LastName = "Straytor",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjMxOl1x0QfN4v0JBnFM5Ji6k2tvuLphbT6YIIyvGoJiuv6H06XS2DlW9s8R2MeUA==",
                            PhoneNumberConfirmed = false,
                            Position = "Goalie",
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-fffffffff123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e795f27-f7bc-4a68-8440-8f742a31ad15",
                            Email = "bobby@bobby.com",
                            EmailConfirmed = true,
                            FirstName = "Bobby",
                            IsAdmin = false,
                            IsVeteran = true,
                            LastName = "Brady",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBY@BOBBY.COM",
                            NormalizedUserName = "BOBBY@BOBBY.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDa/38B4g5mb30izYmuUsGsokS/gebieY015YAscJGstvQijSrDqqUfweGjRS0Orpg==",
                            PhoneNumberConfirmed = false,
                            Position = "Forward",
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794123",
                            TwoFactorEnabled = false,
                            UserName = "bobby@bobby.com"
                        });
                });

            modelBuilder.Entity("_7Element.Models.DonatedTickets", b =>
                {
                    b.Property<int>("DonatedTicketsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PredsGameId")
                        .HasColumnType("int");

                    b.Property<bool>("TransactionComplete")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DonatedTicketsId");

                    b.HasIndex("PredsGameId");

                    b.HasIndex("UserId");

                    b.ToTable("DonatedTickets");

                    b.HasData(
                        new
                        {
                            DonatedTicketsId = 1,
                            PredsGameId = 1,
                            TransactionComplete = true,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            DonatedTicketsId = 2,
                            PredsGameId = 1,
                            TransactionComplete = true,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("_7Element.Models.PickupGame", b =>
                {
                    b.Property<int>("PickupGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGoalies")
                        .HasColumnType("int");

                    b.Property<int>("MaxSkaters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PickupGameId");

                    b.ToTable("PickupGame");

                    b.HasData(
                        new
                        {
                            PickupGameId = 1,
                            DateTime = new DateTime(2019, 12, 16, 13, 13, 20, 895, DateTimeKind.Local).AddTicks(1778),
                            Location = "Ford Ice Bellvue",
                            MaxGoalies = 2,
                            MaxSkaters = 20,
                            Title = "Hockey"
                        },
                        new
                        {
                            PickupGameId = 2,
                            DateTime = new DateTime(2019, 12, 16, 13, 13, 20, 895, DateTimeKind.Local).AddTicks(9221),
                            Location = "Ford Ice Antioch",
                            MaxGoalies = 2,
                            MaxSkaters = 20,
                            Title = "Hockey again"
                        });
                });

            modelBuilder.Entity("_7Element.Models.PlayerStats", b =>
                {
                    b.Property<int>("PlayerStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAllowed")
                        .HasColumnType("int");

                    b.Property<int>("PIM")
                        .HasColumnType("int");

                    b.Property<int>("PickupGameId")
                        .HasColumnType("int");

                    b.Property<int>("Shots")
                        .HasColumnType("int");

                    b.Property<int>("ShotsFaced")
                        .HasColumnType("int");

                    b.Property<double>("TOI")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlayerStatsId");

                    b.HasIndex("PickupGameId");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerStats");

                    b.HasData(
                        new
                        {
                            PlayerStatsId = 1,
                            Assists = 2,
                            Goals = 1,
                            GoalsAllowed = 0,
                            PIM = 0,
                            PickupGameId = 1,
                            Shots = 3,
                            ShotsFaced = 0,
                            TOI = 14.5,
                            UserId = "00000000-ffff-ffff-ffff-fffffffff123"
                        },
                        new
                        {
                            PlayerStatsId = 2,
                            Assists = 0,
                            Goals = 0,
                            GoalsAllowed = 6,
                            PIM = 0,
                            PickupGameId = 1,
                            Shots = 0,
                            ShotsFaced = 40,
                            TOI = 60.0,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PlayerStatsId = 3,
                            Assists = 2,
                            Goals = 4,
                            GoalsAllowed = 0,
                            PIM = 0,
                            PickupGameId = 1,
                            Shots = 11,
                            ShotsFaced = 0,
                            TOI = 14.5,
                            UserId = "00000000-ffff-ffff-ffff-fffffffff123"
                        },
                        new
                        {
                            PlayerStatsId = 4,
                            Assists = 0,
                            Goals = 0,
                            GoalsAllowed = 3,
                            PIM = 0,
                            PickupGameId = 1,
                            Shots = 0,
                            ShotsFaced = 55,
                            TOI = 60.0,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("_7Element.Models.PredsGame", b =>
                {
                    b.Property<int>("PredsGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Opponent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PredsGameId");

                    b.ToTable("PredsGame");

                    b.HasData(
                        new
                        {
                            PredsGameId = 1,
                            DateTime = new DateTime(2019, 12, 16, 13, 13, 20, 896, DateTimeKind.Local).AddTicks(7520),
                            Opponent = "Dallas Stars"
                        });
                });

            modelBuilder.Entity("_7Element.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DonatedTicketsId")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("DonatedTicketsId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            DonatedTicketsId = 1,
                            Row = "M",
                            Seat = "7",
                            Section = "301"
                        },
                        new
                        {
                            TicketId = 2,
                            DonatedTicketsId = 1,
                            Row = "M",
                            Seat = "8",
                            Section = "301"
                        },
                        new
                        {
                            TicketId = 3,
                            DonatedTicketsId = 2,
                            Row = "B",
                            Seat = "11",
                            Section = "101"
                        },
                        new
                        {
                            TicketId = 4,
                            DonatedTicketsId = 2,
                            Row = "B",
                            Seat = "12",
                            Section = "101"
                        });
                });

            modelBuilder.Entity("_7Element.Models.UserPickupGame", b =>
                {
                    b.Property<int>("UserPickupGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsStandby")
                        .HasColumnType("bit");

                    b.Property<int>("PickupGameId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserPickupGameId");

                    b.HasIndex("PickupGameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPickupGame");

                    b.HasData(
                        new
                        {
                            UserPickupGameId = 1,
                            DateTime = new DateTime(2019, 12, 16, 13, 13, 20, 896, DateTimeKind.Local).AddTicks(1155),
                            IsStandby = false,
                            PickupGameId = 1,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            UserPickupGameId = 2,
                            DateTime = new DateTime(2019, 12, 16, 13, 13, 20, 896, DateTimeKind.Local).AddTicks(1967),
                            IsStandby = false,
                            PickupGameId = 1,
                            UserId = "00000000-ffff-ffff-ffff-fffffffff123"
                        });
                });

            modelBuilder.Entity("_7Element.Models.UserPredsGame", b =>
                {
                    b.Property<int>("UserPredsGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DonatedTicketsId")
                        .HasColumnType("int");

                    b.Property<int>("PredsGameId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserPredsGameId");

                    b.HasIndex("DonatedTicketsId");

                    b.HasIndex("PredsGameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPredsGame");

                    b.HasData(
                        new
                        {
                            UserPredsGameId = 1,
                            DonatedTicketsId = 1,
                            PredsGameId = 1,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            UserPredsGameId = 2,
                            DonatedTicketsId = 2,
                            PredsGameId = 1,
                            UserId = "00000000-ffff-ffff-ffff-fffffffff123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_7Element.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_7Element.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_7Element.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_7Element.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_7Element.Models.DonatedTickets", b =>
                {
                    b.HasOne("_7Element.Models.PredsGame", "PredsGame")
                        .WithMany("DonatedTickets")
                        .HasForeignKey("PredsGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_7Element.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_7Element.Models.PlayerStats", b =>
                {
                    b.HasOne("_7Element.Models.PickupGame", "PickupGame")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PickupGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_7Element.Models.ApplicationUser", "User")
                        .WithMany("PlayerStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_7Element.Models.Ticket", b =>
                {
                    b.HasOne("_7Element.Models.DonatedTickets", "DonatedTickets")
                        .WithMany()
                        .HasForeignKey("DonatedTicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_7Element.Models.UserPickupGame", b =>
                {
                    b.HasOne("_7Element.Models.PickupGame", "PickupGame")
                        .WithMany("UserPickupGames")
                        .HasForeignKey("PickupGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_7Element.Models.ApplicationUser", "User")
                        .WithMany("UserPickupGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_7Element.Models.UserPredsGame", b =>
                {
                    b.HasOne("_7Element.Models.DonatedTickets", "DonatedTickets")
                        .WithMany()
                        .HasForeignKey("DonatedTicketsId");

                    b.HasOne("_7Element.Models.PredsGame", "PredsGame")
                        .WithMany("UserPredsGames")
                        .HasForeignKey("PredsGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_7Element.Models.ApplicationUser", "User")
                        .WithMany("UserPredsGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
